import os
import groq
import json

DISCLAIMER = (
    "\n\n---\n"
    "This letter was generated by an AI assistant for draft and review purposes only. "
    "It is not legal advice. Please consult a qualified attorney before acting on its contents."
)

class FaultAnalysisAgent:
    def __init__(self):
        self.api_key = os.getenv("GROQ_API_KEY")

    def analyze(self, client_data):
        client = groq.Client(api_key=self.api_key)
        agentic_cot_prompt = f"""
You are a legal reasoning agent tasked with determining accident fault.

Instructions:
- Act as a legal expert.
- Do NOT give legal advice about whether the client should sue, settle, or take legal action.
- Only provide factual summaries and draft letters based on the information.
- If asked for legal strategy, respond: "I'm an AI assistant and cannot provide legal strategy or advice on actions to take."
- Respond ONLY in valid JSON, with these keys: plan, chain_of_thought, conclusion, missing_fields, document, explanation.

User intake:
{client_data}
"""
        response = client.chat.completions.create(
            model="llama3-70b-8192",
            messages=[{"role": "user", "content": agentic_cot_prompt}]
        )
        try:
            result = json.loads(response.choices[0].message.content)
        except json.JSONDecodeError:
            result = {
                "error": "Could not parse response as JSON",
                "raw": response.choices[0].message.content
            }
        # Add disclaimer if document present
        if "document" in result:
            if isinstance(result["document"], str):
                result["document"] += DISCLAIMER
            elif isinstance(result["document"], dict):
                result["document"] = json.dumps(result["document"], indent=2) + DISCLAIMER
            else:
                result["document"] = str(result["document"]) + DISCLAIMER
        return result