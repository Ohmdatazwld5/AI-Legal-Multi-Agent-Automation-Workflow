import streamlit as st
from agents.intake_agent import IntakeAgent
from agents.fault_analysis import FaultAnalysisAgent
from agents.document_generation_agent import DocumentGenerationAgent
import json
import re

DISCLAIMER = (
    "\n\n---\n"
    "This letter was generated by an AI assistant for draft and review purposes only. "
    "It is not legal advice. Please consult a qualified attorney before acting on its contents."
)

def get_letter_text(doc):
    """
    Returns a clean letter string from a doc value that could be:
    - a string (tries to parse as JSON if it looks like JSON)
    - a list of strings (joins with double newlines)
    - a dict with 'draft_letter', 'letter', or 'content' (recursively extracts)
    - else, returns as string
    """
    # Try to parse JSON string if possible
    if isinstance(doc, str):
        doc_strip = doc.strip()
        # Heuristics: try to parse if it looks like JSON
        if (doc_strip.startswith("{") and doc_strip.endswith("}")) or (doc_strip.startswith("[") and doc_strip.endswith("]")):
            try:
                val = json.loads(doc_strip)
                return get_letter_text(val)
            except Exception:
                pass
        return doc
    elif isinstance(doc, dict):
        # Try common keys recursively
        for key in ["draft_letter", "letter", "content"]:
            if key in doc:
                return get_letter_text(doc[key])
        return str(doc)
    elif isinstance(doc, list):
        return "\n\n".join([get_letter_text(x) for x in doc])
    else:
        return str(doc)

def extract_letter_from_raw(raw):
    """
    Attempts to extract a draft letter from a raw string when agent JSON is malformed.
    Looks for 'Document (Draft):' and returns the following block as the letter.
    """
    match = re.search(r'Document \(Draft\):\s*\n(.*)', raw, re.DOTALL)
    if match:
        letter = match.group(1).strip()
        # Remove trailing explanations if present
        split_letter = re.split(r'(This letter was generated by an AI assistant.*)', letter, maxsplit=1, flags=re.DOTALL)
        if len(split_letter) > 1:
            letter = split_letter[0].strip() + "\n\n" + split_letter[1]
        return letter
    return ""

st.title("AI Legal Document Generator")

# Intake form
client_name = st.text_input("Client Name")
date_of_incident = st.date_input("Date of Incident")
location = st.text_input("Incident Location")
incident_description = st.text_area("Incident Description")
police_report = st.checkbox("Police Report Filed?")
witnesses = st.text_area("Witnesses (comma-separated)")

if st.button("Analyze Fault"):
    # -- Input Validation Guardrail --
    missing = []
    if not client_name:
        missing.append("Client Name")
    if not date_of_incident:
        missing.append("Date of Incident")
    if not incident_description:
        missing.append("Incident Description")
    if missing:
        st.error(f"Missing required fields: {', '.join(missing)}")
        st.stop()

    intake_data = {
        "client_name": client_name,
        "date_of_incident": str(date_of_incident),
        "location": location,
        "incident_description": incident_description,
        "police_report": police_report,
        "witnesses": [w.strip() for w in witnesses.split(",") if w.strip()]
    }

    # -- Call Agents --
    intake_agent = IntakeAgent()
    intake_result = intake_agent.process(intake_data)

    fault_agent = FaultAnalysisAgent()
    fault_result = fault_agent.analyze(intake_data)

    doc_agent = DocumentGenerationAgent()
    doc_result = doc_agent.generate(intake_data, fault_result)

    # ---- Display Fault Analysis ----
    st.header("Fault Analysis")
    with st.expander("Raw Fault Analysis Output (JSON)"):
        st.code(json.dumps(fault_result, indent=2), language='json')

    # --- Fault Analysis Error Handling ---
    if "error" in fault_result:
        st.error("Could not parse Fault Analysis agent output as JSON. See raw output above.")
        raw = fault_result.get("raw", "")
        # Try to extract a letter from the raw output if possible
        letter_text = extract_letter_from_raw(raw)
        if letter_text:
            st.subheader("Extracted Draft Letter")
            st.markdown(letter_text)
    else:
        # --- Robust Plan Section ---
        st.subheader("Plan")
        plan = fault_result.get("plan", [])
        if isinstance(plan, str):
            plan_steps = [step.strip() for step in plan.replace('\n', '.').split('.') if step.strip()]
        elif isinstance(plan, list):
            plan_steps = plan
        else:
            plan_steps = []

        if plan_steps:
            for idx, step in enumerate(plan_steps, 1):
                st.markdown(f"{idx}. {step}")
        else:
            st.write("No plan steps provided.")

        st.subheader("Chain of Thought")
        cot = fault_result.get("chain_of_thought", [])
        if isinstance(cot, list):
            for idx, thought in enumerate(cot, 1):
                st.markdown(f"**Step {idx}:** {thought}")
        elif isinstance(cot, str):
            st.markdown(cot)
        else:
            st.write("No chain of thought provided.")

        st.subheader("Conclusion")
        st.write(fault_result.get("conclusion", ""))

        st.subheader("Missing Fields")
        missing_fields = fault_result.get("missing_fields")
        if isinstance(missing_fields, list):
            st.write(", ".join(missing_fields))
        elif isinstance(missing_fields, str):
            st.write(missing_fields)
        else:
            st.write("")

        st.subheader("Document")
        doc = fault_result.get("document", "")
        st.write(get_letter_text(doc))

        st.subheader("Explanation")
        st.write(fault_result.get("explanation", ""))

    # ---- Display Legal Summary Document ----
    st.header("Legal Summary Document")
    doc_text = doc_result.get("document", "No document generated.")
    doc_text = get_letter_text(doc_text)
    if DISCLAIMER.strip() not in doc_text:
        doc_text += DISCLAIMER
    st.subheader("Draft Letter (For Attorney Review)")
    st.markdown(doc_text)
    st.warning("This is an AI-generated draft. Please review before sending to the client.")

    if st.button("Mark as Reviewed by Attorney"):
        st.success("Document marked as reviewed. Ready for further action.")

# Optionally: Hide or redact sensitive data in logs or extra UI